Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom database_connector import DatabaseConnector\r\nfrom Menus.welcome_screen import WelcomeScreen\r\nfrom Menus.main_menu import MainMenu\r\nfrom Menus.settings import Settings\r\n\r\n# This quick main file sets up the basic tkinter window that will contain all the frames encompassing the tracker\r\n\r\nsettings = Settings()\r\n\r\nwindow = tk.Tk()\r\nwindow.title(\"Grow Your Habits\")\r\nwindow.configure(background=settings.colors[\"background\"])\r\nwindow.minsize(400, 500)\r\nwindow.maxsize(400, 700)\r\nwindow.rowconfigure(0, weight=1)\r\nwindow.columnconfigure(0, weight=1)\r\n\r\n# The database is loaded or the user send to the first time welcome screen, if no database is set up so far\r\n\r\ndb_connect = DatabaseConnector()\r\n\r\nif len(db_connect.load_all_habit_ids()) > 0:\r\n    MainMenu(window, db_connect)\r\nelse:\r\n    WelcomeScreen(window, db_connect)\r\n\r\nwindow.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -1,5 +1,5 @@
 import tkinter as tk
-from database_connector import DatabaseConnector
+from Database.database_connector import DatabaseConnector
 from Menus.welcome_screen import WelcomeScreen
 from Menus.main_menu import MainMenu
 from Menus.settings import Settings
Index: test_suite.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from habit import Habit\r\nfrom streak import Streak\r\nfrom database_connector import DatabaseConnector\r\nfrom datetime import datetime, timedelta\r\nfrom freezegun import freeze_time\r\nimport habit_analytics as hana\r\nimport pytest\r\n\r\n\r\nclass TestHabit:\r\n\r\n    def setup_method(self):\r\n        self.empty_db = DatabaseConnector(\"test_empty_database.db\")\r\n        self.test_db = DatabaseConnector(\"test_database.db\")\r\n\r\n        self.test_db.insert_dummy()\r\n\r\n    @pytest.fixture\r\n    def loaded_habit(self):\r\n        return Habit(self.test_db, 1)\r\n\r\n    @pytest.fixture\r\n    def newly_added_habit(self):\r\n        hab = Habit(self.test_db)\r\n        hab.new_habit()\r\n        return hab\r\n\r\n    @pytest.fixture\r\n    def weekly_streak(self):\r\n        return Streak(1, 7, datetime(2023, 1, 1))\r\n\r\n    def test_dummy_habit_data_loaded_correctly_in_setup(self, loaded_habit):\r\n        assert loaded_habit.created.day == (datetime.today()-timedelta(days=63)).day\r\n\r\n    def test_dummy_checks_data_loaded_correctly_in_setup(self, loaded_habit):\r\n        assert loaded_habit.latest_check().hour == 21\r\n\r\n    def test_deleting_the_database_and_reloading_a_dummy_dataset_in_then_reset_database_works(self):\r\n        self.test_db.reset_database()\r\n        self.test_db.insert_dummy()\r\n\r\n        habit_a = Habit(self.test_db, 1)\r\n\r\n        assert habit_a.latest_check().hour == 21\r\n\r\n    def test_when_habit_added_then_habit_loadable_from_database(self, newly_added_habit):\r\n        habit_b = Habit(self.test_db, newly_added_habit.habit_id)\r\n\r\n        assert (newly_added_habit.name, newly_added_habit.created, newly_added_habit.description) == \\\r\n               (habit_b.name, habit_b.created, habit_b.description)\r\n\r\n    def test_when_habit_added_then_one_more_entry_in_database(self):\r\n        entries_before = len(self.test_db.load_all_habit_ids())\r\n        habit_a = Habit(self.test_db)\r\n        habit_a.new_habit()\r\n        entries_after = len(self.test_db.load_all_habit_ids())\r\n\r\n        assert entries_before + 1 == entries_after\r\n\r\n    def test_when_loading_nonexistent_habit_from_database_then_no_change_to_base_habit(self):\r\n        habit_new = Habit(self.empty_db)\r\n        habit_load = Habit(self.empty_db, created=habit_new.created)\r\n        habit_load.load_data(0)\r\n\r\n        assert (habit_new.habit_id, habit_new.name, habit_new.periodicity, habit_new.created) == \\\r\n               (habit_load.habit_id, habit_load.name, habit_load.periodicity, habit_load.created)\r\n\r\n    def test_fetch_check_of_habit_that_hasnt_been_performed_then_return_year_2000_and_0_checks(self, newly_added_habit):\r\n        assert self.test_db.load_latest_check(newly_added_habit.habit_id) == datetime(2000, 1, 1)\r\n        assert newly_added_habit.check_count() == 0\r\n\r\n    def test_perform_a_habit_then_return_saved_and_latest_check_is_in_database(self, loaded_habit):\r\n        result = loaded_habit.perform()\r\n\r\n        assert result == \"Saved\"\r\n        assert self.test_db.load_latest_check(loaded_habit.habit_id).day == (datetime.today() - timedelta(hours=2)).day\r\n\r\n    def test_perform_a_habit_at_that_has_been_performed_before_today_then_return_too_early(self, loaded_habit):\r\n        result_one = loaded_habit.perform()\r\n        result_two = loaded_habit.perform()\r\n\r\n        assert result_one == \"Saved\"\r\n        assert result_two == \"Too Early\"\r\n\r\n    @freeze_time('01:12:13.000001', tick=True)\r\n    def test_perform_a_habit_at_1_am_that_has_been_performed_before_today_then_return_too_early(self, loaded_habit):\r\n        result_one = loaded_habit.perform()\r\n        result_two = loaded_habit.perform()\r\n\r\n        assert result_one == \"Saved\"\r\n        assert result_two == \"Too Early\"\r\n\r\n    def test_check_that_will_or_will_not_break_the_streak_then_streak_check_returns_true_or_false(self, weekly_streak):\r\n\r\n        assert weekly_streak.check_continues_streak(datetime(2023, 1, 8))\r\n        assert not weekly_streak.check_continues_streak(datetime(2023, 1, 10))\r\n\r\n    def test_add_a_check_that_will_continue_the_streak_then_streak_is_ongoing(self, weekly_streak):\r\n        weekly_streak.add_check(datetime(2023, 1, 5))\r\n\r\n        assert weekly_streak.ongoing\r\n        assert weekly_streak.length() == 5\r\n\r\n    def test_add_a_check_that_will_not_continue_the_streak_then_streak_is_not_ongoing(self, weekly_streak):\r\n        weekly_streak.add_check(datetime(2023, 1, 10))\r\n\r\n        assert not weekly_streak.ongoing\r\n\r\n    def test_the_consistency_of_a_habit(self):\r\n        assert hana.consistency(self.test_db, 2, 28) == (27, 28)\r\n\r\n    def test_the_consistency_calculation_of_a_habit_that_has_been_performed_more_than_necessary(self):\r\n        assert hana.consistency(self.test_db, 1, 28) == (5, 4)\r\n\r\n    def test_create_a_habit_then_its_consistency_will_be_0_out_of_1(self, newly_added_habit):\r\n        assert hana.consistency(self.test_db, newly_added_habit.habit_id, 28) == (0, 1)\r\n\r\n    def test_consistency_of_1_day_tests_if_habit_was_performed_today(self, loaded_habit, newly_added_habit):\r\n        loaded_habit.perform()\r\n\r\n        assert hana.consistency(self.test_db, loaded_habit.habit_id, 1)[0] == 1\r\n        assert hana.consistency(self.test_db, newly_added_habit.habit_id, 1)[0] == 0\r\n\r\n    def test_delete_a_habit_then_checks_are_deleted_as_well(self, loaded_habit):\r\n        loaded_habit.perform()\r\n        loaded_habit.delete()\r\n\r\n        assert not self.test_db._check_if_in_table(\"habits\", 1)\r\n\r\n    def teardown_method(self):\r\n        self.test_db.delete_database()\r\n        self.empty_db.delete_database()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_suite.py b/test_suite.py
--- a/test_suite.py	
+++ b/test_suite.py	
@@ -1,6 +1,6 @@
 from habit import Habit
 from streak import Streak
-from database_connector import DatabaseConnector
+from Database.database_connector import DatabaseConnector
 from datetime import datetime, timedelta
 from freezegun import freeze_time
 import habit_analytics as hana
Index: database_connector.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database_connector.py b/Database/database_connector.py
rename from database_connector.py
rename to Database/database_connector.py
--- a/database_connector.py	
+++ b/Database/database_connector.py	
@@ -11,11 +11,11 @@
         A DatabaseConnector handles all communication with a sqlite3 based database.
         The initialization establishes a connection with the database and creates the cursor object,
         after which it initializes all required tables, if they haven't been previously set up.
-        :param name: name of the database file, default: "habit-tracker-database.db", testing default: "test.db"
+        :param name: name of the database file, default: "habit-tracker-database.db"
         """
 
         self.name = name
-        self.db = sqlite3.connect(name)
+        self.db = sqlite3.connect("Database/"+name)
         self.cur = self.db.cursor()
 
         habits_query = """CREATE TABLE IF NOT EXISTS habits (
@@ -67,7 +67,7 @@
         some calculations are performed on the dates to make the dataset current.
         """
 
-        habits_data = pd.read_csv('testdata_habits.csv', sep=';')
+        habits_data = pd.read_csv('Database/testdata_habits.CSV', sep=';')
 
         for index, row in habits_data.iterrows():
             date_to_save = datetime.today() - timedelta(days=row["days_ago"])
@@ -79,7 +79,7 @@
             self.cur.execute(query, (row["habit_id"], row["name"],
                                      row["periodicity"], date_to_save, row["description"]))
 
-        checks_data = pd.read_csv('testdata_checks.csv', sep=';')
+        checks_data = pd.read_csv('Database/testdata_checks.CSV', sep=';')
         self.cur.execute("PRAGMA foreign_keys = on")
 
         for index, row in checks_data.iterrows():
diff --git a/testdata_habits.CSV b/Database/testdata_habits.CSV
rename from testdata_habits.CSV
rename to Database/testdata_habits.CSV
diff --git a/testdata_checks.CSV b/Database/testdata_checks.CSV
rename from testdata_checks.CSV
rename to Database/testdata_checks.CSV
